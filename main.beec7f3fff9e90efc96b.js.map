{"version":3,"sources":["webpack:///./src/resources/js/pikavolley_online.js","webpack:///./src/resources/js/main_online.js"],"names":["stage","resources","super","this","physics","player1","isComputer","player2","keyboardArray","unsubscribe","myKeyboard","myOnlineKeyboard","inputQueue","peerOnlineKeyboard","peerInputQueue","_amIPlayer2","_syncCounter","noInputFrameTotal","menu","Infinity","isFirstGame","willSaveReplay","bool","amIPlayer2","counter","mod","frameCounter","selectedWithWho","amICreatedRoom","isQuickMatch","intro","myNickname","peerNickname","myPartialPublicIP","peerPartialPublicIP","gameStartAllowed","isOpen","getInputIfNeededAndSendToPeer","syncCounter","gameLoopFromGettingPeerInput","isInputOnQueue","callbackAfterPeerInputQueueReceived","bind","getInput","player1Input","xDirection","yDirection","powerHit","player2Input","recordInputs","slowMotionFramesLeft","slowMotionNumOfSkippedFrames","Math","round","normalFPS","slowMotionFPS","state","length","window","setTimeout","gameLoop","TEXTURES","WITH_COMPUTER","WITH_FRIEND","settings","RESOLUTION","devicePixelRatio","SCALE_MODE","NEAREST","ROUND_PIXELS","renderer","width","height","antialias","backgroundColor","transparent","ticker","loader","document","querySelector","appendChild","view","render","add","SPRITE_SHEET","prop","SOUNDS","setup","pikaVolley","maxFPS","start","loadingBox","getElementById","progressBar","on","style","progress","classList","contains","setUpLoaderProgresBar","callbackAfterDataChannelOpened","load"],"mappings":"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","file":"main.beec7f3fff9e90efc96b.js","sourcesContent":["'use strict';\nimport { PikachuVolleyball } from './offline_version_js/pikavolley.js';\nimport { bufferLength, myKeyboard, OnlineKeyboard } from './keyboard_online.js';\nimport { SYNC_DIVISOR, channel } from './data_channel/data_channel';\nimport { mod } from './utils/mod.js';\nimport { askOneMoreGame } from './ui_online.js';\nimport { displayPartialIPFor, displayNicknameFor } from './nickname_display.js';\nimport { replaySaver } from './replay/replay_saver.js';\nimport { PikaUserInput } from './offline_version_js/physics.js';\n\n/** @typedef GameState @type {function():void} */\n\n/**\n * Class reperesenting Pikachu Volleyball p2p online game\n */\n// @ts-ignore\nexport class PikachuVolleyballOnline extends PikachuVolleyball {\n  constructor(stage, resources) {\n    super(stage, resources);\n    this.physics.player1.isComputer = false;\n    this.physics.player2.isComputer = false;\n\n    // @ts-ignore\n    this.keyboardArray[0].unsubscribe();\n    // @ts-ignore\n    this.keyboardArray[1].unsubscribe();\n\n    this.myKeyboard = myKeyboard;\n    this.myOnlineKeyboard = new OnlineKeyboard(this.myKeyboard.inputQueue);\n    this.peerOnlineKeyboard = new OnlineKeyboard(channel.peerInputQueue);\n\n    this._amIPlayer2 = false;\n    this.keyboardArray = [this.myOnlineKeyboard, this.peerOnlineKeyboard];\n    this._syncCounter = 0;\n    this.noInputFrameTotal.menu = Infinity;\n\n    this.isFirstGame = true;\n\n    this.willSaveReplay = true;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  get amIPlayer2() {\n    return this._amIPlayer2;\n  }\n\n  /**\n   * @param {boolean} bool Am I Player 2? Am I play on the right side?\n   */\n  set amIPlayer2(bool) {\n    this._amIPlayer2 = bool;\n    channel.amIPlayer2 = bool;\n    if (this._amIPlayer2 === true) {\n      this.keyboardArray = [this.peerOnlineKeyboard, this.myOnlineKeyboard];\n    } else {\n      this.keyboardArray = [this.myOnlineKeyboard, this.peerOnlineKeyboard];\n    }\n  }\n\n  get syncCounter() {\n    return this._syncCounter;\n  }\n\n  set syncCounter(counter) {\n    this._syncCounter = mod(counter, SYNC_DIVISOR);\n  }\n\n  /**\n   * Override the \"intro\" method in the super class.\n   * It is to ask for one more game with the peer after quick match game ends.\n   * @type {GameState}\n   */\n  intro() {\n    if (this.frameCounter === 0) {\n      this.selectedWithWho = 0;\n      if (this.isFirstGame) {\n        this.isFirstGame = false;\n        this.amIPlayer2 = !channel.amICreatedRoom;\n      } else if (channel.isQuickMatch) {\n        askOneMoreGame();\n      }\n    }\n    super.intro();\n  }\n\n  /**\n   * Override the \"menu\" method in the super class.\n   * It changes \"am I player 1 or player 2\" setting accordingly.\n   * @type {GameState}\n   */\n  menu() {\n    const selectedWithWho = this.selectedWithWho;\n    super.menu();\n    if (this.selectedWithWho !== selectedWithWho) {\n      this.amIPlayer2 = !this.amIPlayer2;\n      displayNicknameFor(channel.myNickname, this.amIPlayer2);\n      displayNicknameFor(channel.peerNickname, !this.amIPlayer2);\n      displayPartialIPFor(channel.myPartialPublicIP, this.amIPlayer2);\n      displayPartialIPFor(channel.peerPartialPublicIP, !this.amIPlayer2);\n    }\n  }\n\n  /**\n   * Game loop\n   * This function should be called at regular intervals ( interval = (1 / FPS) second )\n   */\n  gameLoop() {\n    if (!(channel.gameStartAllowed && channel.isOpen)) {\n      return;\n    }\n\n    // Sync game frame and user input with peer\n    //\n    // This must be before the slow-mo effect.\n    // Otherwise, frame sync could be broken,\n    // for example, if peer use other tap on the browser\n    // so peer's game pause while my game goes on slow-mo.\n    // This broken frame sync results into different game state between two peers.\n    this.myKeyboard.getInputIfNeededAndSendToPeer(this.syncCounter);\n    this.gameLoopFromGettingPeerInput();\n  }\n\n  gameLoopFromGettingPeerInput() {\n    const checkForPeerInputQueue = this.peerOnlineKeyboard.isInputOnQueue(\n      this.syncCounter\n    );\n    if (!checkForPeerInputQueue) {\n      channel.callbackAfterPeerInputQueueReceived = this.gameLoopFromGettingPeerInput.bind(\n        this\n      );\n      return;\n    }\n    const checkForMyInputQueue = this.myOnlineKeyboard.isInputOnQueue(\n      this.syncCounter\n    );\n    if (!checkForMyInputQueue) {\n      return;\n    }\n    this.peerOnlineKeyboard.getInput(this.syncCounter);\n    this.myOnlineKeyboard.getInput(this.syncCounter);\n    this.syncCounter++;\n\n    if (this.willSaveReplay) {\n      const player1Input = new PikaUserInput();\n      player1Input.xDirection = this.keyboardArray[0].xDirection;\n      player1Input.yDirection = this.keyboardArray[0].yDirection;\n      player1Input.powerHit = this.keyboardArray[0].powerHit;\n      const player2Input = new PikaUserInput();\n      player2Input.xDirection = this.keyboardArray[1].xDirection;\n      player2Input.yDirection = this.keyboardArray[1].yDirection;\n      player2Input.powerHit = this.keyboardArray[1].powerHit;\n      replaySaver.recordInputs(player1Input, player2Input);\n    }\n\n    // slow-mo effect\n    if (this.slowMotionFramesLeft > 0) {\n      this.slowMotionNumOfSkippedFrames++;\n      if (\n        this.slowMotionNumOfSkippedFrames %\n          Math.round(this.normalFPS / this.slowMotionFPS) !==\n        0\n      ) {\n        return;\n      }\n      this.slowMotionFramesLeft--;\n      this.slowMotionNumOfSkippedFrames = 0;\n    }\n\n    this.physics.player1.isComputer = false;\n    this.physics.player2.isComputer = false;\n    this.state();\n\n    // window.setTimeout(callback, 0) is used because it puts\n    // the callback to the message queue of Javascript runtime event loop,\n    // so the callback does not stack upon the stack of the caller function and\n    // also does not block if the callbacks are called a bunch in a row.\n    if (this.peerOnlineKeyboard.inputQueue.length > bufferLength) {\n      if (this.myOnlineKeyboard.inputQueue.length > bufferLength) {\n        window.setTimeout(this.gameLoopFromGettingPeerInput.bind(this), 0);\n      } else {\n        window.setTimeout(this.gameLoop.bind(this), 0);\n      }\n    }\n  }\n}\n","/**\n * This is the main script which executes the p2p online version game.\n * General explanations for the all source code files of the game are following.\n *\n ********************************************************************************************************************\n * This p2p online version of the Pikachu Volleyball is developed based on\n * the Pikachu Volleyball offline web version (https://github.com/gorisanson/pikachu-volleyball)\n * which is made by reverse engineering the core part of the original Pikachu Volleyball game\n * which is developed by \"1997 (C) SACHI SOFT / SAWAYAKAN Programmers\" & \"1997 (C) Satoshi Takenouchi\".\n ********************************************************************************************************************\n *\n * This p2p online version game is mainly composed of two parts below.\n *  1) Offline version: All the offline web version source code files is in the directory \"offline_version_js\".\n *  2) WebRTC data channels: It utilizes WebRTC data channels to communicate with the peer.\n *                           The peer-to-peer online functions are contained in \"data_channel.js\"\n *\n * The game is deterministic on the user (keyboard) inputs except the RNG (random number generator) used in\n * \"offline_version_js/physics.js\" and \"offline_version_js/cloud_and_wave.js\". (The RNG is contained\n * in \"offline_version_js/rand.js\".) So if the RNG is the same on both peers, only the user inputs need\n * to be communicated to maintain the same game state between the peers. In this p2p online version, the RNG\n * is set to the same thing on both peers at the data channel open event (handled by the function\n * \"dataChannelOpened\" in \"data_channel.js\"), then the user inputs are communicated via the data channel.\n *\n * And expainations for other source files are below.\n *  - \"pikavolley_online.js\": A wrapper for \"offline_version_js/pikavolley.js\".\n *  - \"keyboard_online.js\": A wrapper for offline version \"offline_version_js/keyboard.js\".\n *                          This module gets user inputs and load them up onto the data channel to the peer.\n *  - \"generate_pushid.js\": Generate a room ID easilly distinguishable by human eye.\n *  - \"mod.js\": To maintain game sync, sync counter is attached for each user input, and mod is used to\n *              make sync counter cycle in a range [0, 255] which fits in a byte.\n *  - \"ui_online.js\": For the user interface of the html page and inputs/outputs relevant to html elements.\n *  - \"chat_display.js\": For displaying chat messages.\n *  - \"firebase_config.template.js\": This p2p online version utilized firebase cloud firestore to establish\n *                                   webRTC data channel connection between peers. Fill this template and\n *                                   change the file name to \"firebase_config.js\".\n *  - \"rtc_configuration.js\": Contains RTCPeerConnection configuration.\n *  - \"quick_match.js\": It is for the quick match function. Manages communication with the quick match server.\n *  - \"qucik_match_server_url.template.js\": Fill this template the url of the quick match server and change\n *                                          the file name to \"qucik_match_server_url.js\"\n */\n'use strict';\nimport * as PIXI from 'pixi.js-legacy';\nimport 'pixi-sound';\nimport { PikachuVolleyballOnline } from './pikavolley_online.js';\nimport { ASSETS_PATH } from './offline_version_js/assets_path.js';\nimport { channel } from './data_channel/data_channel.js';\nimport { setUpUI, setUpUIAfterLoadingGameAssets } from './ui_online.js';\nimport { setGetSpeechBubbleNeeded } from './chat_display.js';\nimport '../style.css';\n\nconst TEXTURES = ASSETS_PATH.TEXTURES;\nTEXTURES.WITH_COMPUTER = TEXTURES.WITH_FRIEND;\n\nconst settings = PIXI.settings;\nsettings.RESOLUTION = window.devicePixelRatio;\nsettings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\nsettings.ROUND_PIXELS = true;\n\nconst renderer = PIXI.autoDetectRenderer({\n  width: 432,\n  height: 304,\n  antialias: false,\n  backgroundColor: 0x000000,\n  transparent: false,\n});\nconst stage = new PIXI.Container();\nconst ticker = new PIXI.Ticker();\nconst loader = new PIXI.Loader();\n\ndocument.querySelector('#game-canvas-container').appendChild(renderer.view);\n\nrenderer.render(stage); // To make the initial canvas painting stable in the Firefox browser.\nloader.add(ASSETS_PATH.SPRITE_SHEET);\nfor (const prop in ASSETS_PATH.SOUNDS) {\n  loader.add(ASSETS_PATH.SOUNDS[prop]);\n}\nsetUpLoaderProgresBar();\nchannel.callbackAfterDataChannelOpened = () => {\n  loader.load(setup);\n};\n\nsetUpUI();\n\n/**\n * Set up the loader progress bar.\n */\nfunction setUpLoaderProgresBar() {\n  const loadingBox = document.getElementById('loading-box');\n  const progressBar = document.getElementById('progress-bar');\n\n  loader.on('progress', () => {\n    progressBar.style.width = `${loader.progress}%`;\n  });\n  loader.on('complete', () => {\n    if (!loadingBox.classList.contains('hidden')) {\n      loadingBox.classList.add('hidden');\n    }\n  });\n}\n\nfunction setup() {\n  const pikaVolley = new PikachuVolleyballOnline(stage, loader.resources);\n  setUpUIAfterLoadingGameAssets(pikaVolley, ticker);\n  setGetSpeechBubbleNeeded(pikaVolley);\n  start(pikaVolley);\n}\n\nfunction start(pikaVolley) {\n  ticker.maxFPS = pikaVolley.normalFPS;\n  ticker.add(() => {\n    // Redering and gameLoop order is the opposite of\n    // the offline web version (refer: ./offline_version_js/main.js).\n    // It's for the smooth rendering for the online version\n    // which gameLoop can not always succeed right on this \"ticker.add\"ed code\n    // because of the transfer delay or connection status. (If gameLoop here fails,\n    // it is recovered by the callback gameLoop which is called after peer input received.)\n    // Now the rendering is delayed 40ms (when pikaVolley.normalFPS == 25)\n    // behind gameLoop.\n    renderer.render(stage);\n    pikaVolley.gameLoop();\n  });\n  ticker.start();\n}\n"],"sourceRoot":""}